#!/usr/bin/env python3
import sys

YES = "Yes"  # type: str
NO = "No"  # type: str


def solve(N: int, t: "List[int]", x: "List[int]", y: "List[int]"):
    
    def solve_one_section(t, x, y):
        if (x + y) % 2 == t % 2:
            gaus_dis = abs(x) + abs(y)
            if gaus_dis <= t:
                return True

        return False
    

    flag = True

    if N == 1:
        if solve_one_section(t[0], x[0], y[0]) == False:
            flag = False

    else:
        for i in range(N-1):
            next_t = t[i+1] - t[i]
            next_x = x[i+1] - x[i]
            next_y = y[i+1] - y[i]
            if solve_one_section(next_t, next_x, next_y) == False:
                flag = False
    
    print(YES) if flag else print(NO)
    
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    t = [int()] * (N)  # type: "List[int]"
    x = [int()] * (N)  # type: "List[int]"
    y = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        t[i] = int(next(tokens))
        x[i] = int(next(tokens))
        y[i] = int(next(tokens))
    solve(N, t, x, y)

if __name__ == '__main__':
    main()
