#!/usr/bin/env python3


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)

def binary_search(target, A):
    left = 0
    right = len(A) - 1
    while (right - left) > 1:
        center = (left + right) // 2
        if A[center] < target:
            left = center
        elif A[center] > target:
            right = center
        else:
            return center + 1
    return left + 1


def answer(l, r, A, sleep_period_list):
    l_index = binary_search(l, A)
    r_index = binary_search(r, A)
    if l_index % 2 == 0:
        is_l_in_period = True
        l_sleep_period_index = l_index // 2
    else:
        is_l_in_period = False
        l_sleep_period_index = l_index // 2 + 1

    if r_index % 2 == 0:
        is_r_in_period = True
        r_sleep_period_index = r_index // 2
    else:
        is_r_in_period = False
        r_sleep_period_index = r_index // 2

    sleep_time = 0
    if l_sleep_period_index > r_sleep_period_index:
        print(sleep_time)
        return
    else:
        for s_i in range(l_sleep_period_index, r_sleep_period_index+1):
            sleep_time += sleep_period_list[s_i][1] - sleep_period_list[s_i][0]
        if is_l_in_period:
            sleep_time -= l - sleep_period_list[l_sleep_period_index][0]
        if is_r_in_period:
            sleep_time -= sleep_period_list[r_sleep_period_index][1] - r
        print(sleep_time)
        return

   
def main():
    N = int(input())
    A = list(map(int, input().split()))
    sleep_period_list = [[] for _ in range(len(A)//2 + 1)]
    sleep_period_list[0] = [0]
    for i in range(1, len(sleep_period_list)):
        sleep_period_list[i] = [A[2*i-1], A[2*i]]

    Q = int(input())
    for _ in range(Q):
        l, r = map(int, input().split())
        answer(l, r, A, sleep_period_list)

if __name__ == '__main__':
    main()
